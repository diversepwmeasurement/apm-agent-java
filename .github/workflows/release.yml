concurrency:
  group: ${{ github.workflow }}
env:
  TAG_NAME: v${{ inputs.version }}
jobs:
  await_artifact_on_maven_central:
    name: Wait for artifacts to be available on maven central
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      uses: actions/checkout@v4
    - continue-on-error: true
      if: ${{ ! inputs.dry_run }}
      name: Await artifacts published in maven central
      run: "until .ci/release/wait_maven_artifact_published.sh ${{ inputs.version\
        \ }}\ndo\n  echo \"Artifacts not found on maven central. Sleeping 30 seconds,\
        \ retrying afterwards\"\n  sleep 30s\ndone\n"
      shell: bash
      timeout-minutes: 120
  build_and_push_docker_images:
    env:
      SONATYPE_FALLBACK: 1
    name: Build and push docker images
    needs:
    - await_artifact_on_maven_central
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.TAG_NAME }}
    - continue-on-error: true
      uses: elastic/apm-pipeline-library/.github/actions/docker-login@current
      with:
        registry: docker.elastic.co
        roleId: ${{ secrets.VAULT_ROLE_ID }}
        secret: secret/apm-team/ci/docker-registry/prod
        secretId: ${{ secrets.VAULT_SECRET_ID }}
        url: ${{ secrets.VAULT_ADDR }}
    - continue-on-error: true
      name: Build docker image
      run: ./scripts/docker-release/build_docker.sh
      shell: bash
    - continue-on-error: true
      if: ${{ ! inputs.dry_run }}
      name: Push docker image
      run: ./scripts/docker-release/push_docker.sh
      shell: bash
  create_github_release:
    if: ${{ ! inputs.dry_run }}
    name: Create GitHub Release
    needs:
    - publish_aws_lambda
    - update_major_branch
    permissions:
      contents: write
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      uses: actions/checkout@v4
      with:
        ref: ${{ env.TAG_NAME }}
    - continue-on-error: true
      name: Await release-notes published
      run: "until .ci/release/wait_release_notes_published.sh ${{ inputs.version }}\n\
        do\n  echo \"Release notes not published yet. Sleeping 30 seconds, retrying\
        \ afterwards\"\n  sleep 30s\ndone\n"
      shell: bash
      timeout-minutes: 120
    - continue-on-error: true
      id: get_dotx_branch
      name: Compute major.x branch
      run: echo "dotx_branch=$(echo '${{ inputs.version }}' | sed -E 's/\..+/.x/')"
        >> $GITHUB_OUTPUT
    - continue-on-error: true
      env:
        GH_TOKEN: ${{ github.token }}
      name: Create GitHub Release
      run: "gh release create ${{ env.TAG_NAME }} \\\n  --title=\"Release ${{ inputs.version\
        \ }}\" \\\n  --notes=\"[Release Notes for ${{ inputs.version }}](https://www.elastic.co/guide/en/apm/agent/java/current/release-notes-${{\
        \ steps.get_dotx_branch.outputs.dotx_branch }}.html#release-notes-${{ inputs.version\
        \ }})\n  ${{ needs.publish_aws_lambda.outputs.arn_content }}\"\n"
  maven_central_deploy:
    if: ${{ ! inputs.skip_maven_deploy && ( inputs.skip_preparation || success() )
      }}
    name: Deploy to Maven Central (Buildkite)
    needs:
    - prepare_release
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      id: buildkite
      name: Run Deploy
      uses: elastic/apm-pipeline-library/.github/actions/buildkite@current
      with:
        buildEnvVars: 'dry_run=${{ inputs.dry_run || ''false'' }}

          '
        pipeline: apm-agent-java-release
        pipelineCommit: ${{ env.TAG_NAME }}
        printBuildLogs: false
        vaultRoleId: ${{ secrets.VAULT_ROLE_ID }}
        vaultSecretId: ${{ secrets.VAULT_SECRET_ID }}
        vaultUrl: ${{ secrets.VAULT_ADDR }}
        waitFor: true
  notify:
    if: ${{ always() && ! inputs.dry_run }}
    needs:
    - prepare_release
    - maven_central_deploy
    - await_artifact_on_maven_central
    - update_major_branch
    - update_cloudfoundry
    - build_and_push_docker_images
    - publish_aws_lambda
    - create_github_release
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      id: check
      uses: elastic/apm-pipeline-library/.github/actions/check-dependent-jobs@current
      with:
        needs: ${{ toJSON(needs) }}
    - continue-on-error: true
      uses: elastic/apm-pipeline-library/.github/actions/notify-build-status@current
      with:
        slackChannel: '#apm-agent-java'
        status: ${{ steps.check.outputs.status }}
        vaultRoleId: ${{ secrets.VAULT_ROLE_ID }}
        vaultSecretId: ${{ secrets.VAULT_SECRET_ID }}
        vaultUrl: ${{ secrets.VAULT_ADDR }}
  prepare_release:
    if: ${{ ! inputs.skip_preparation }}
    name: Changelog and Version Bump
    permissions:
      contents: write
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      uses: elastic/apm-pipeline-library/.github/actions/github-token@current
      with:
        roleId: ${{ secrets.VAULT_ROLE_ID }}
        secretId: ${{ secrets.VAULT_SECRET_ID }}
        url: ${{ secrets.VAULT_ADDR }}
    - continue-on-error: true
      uses: elastic/apm-pipeline-library/.github/actions/setup-git@current
      with:
        email: ${{ env.GIT_EMAIL }}
        token: ${{ env.GITHUB_TOKEN }}
        username: ${{ env.GIT_USER }}
    - continue-on-error: true
      uses: actions/checkout@v4
      with:
        ref: ${{ inputs.branch }}
        token: ${{ env.GITHUB_TOKEN }}
    - continue-on-error: true
      name: Install JDK and mvn clean
      uses: ./.github/workflows/maven-goal
      with:
        command: ./mvnw clean
    - continue-on-error: true
      if: ${{ inputs.update_changelog && ! inputs.dry_run }}
      name: Prepare changelog for release
      run: 'java .ci/ReleaseChangelog.java CHANGELOG.asciidoc ${{ inputs.version }}

        git commit -m "Prepare changelog for release ${{ inputs.version }}" CHANGELOG.asciidoc

        '
    - continue-on-error: true
      if: ${{ ! inputs.dry_run }}
      name: Bump version and add git tag
      run: ./mvnw release:prepare -B -DpushChanges=false "-Darguments=-DskipTests
        -Dmaven.javadoc.skip=true" -DreleaseVersion=${{ inputs.version }}
    - continue-on-error: true
      if: ${{ ! inputs.dry_run }}
      name: Push changes
      run: git push --atomic origin ${{ inputs.branch }} ${{ env.TAG_NAME }}
  publish_aws_lambda:
    env:
      AWS_DEFAULT_REGION: eu-west-1
    name: Publish AWS Lambda
    needs:
    - await_artifact_on_maven_central
    outputs:
      arn_content: ${{ steps.arn_output.outputs.arn_content }}
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      uses: actions/checkout@v4
      with:
        ref: ${{ env.TAG_NAME }}
    - continue-on-error: true
      name: Build Lambda-layer zip using agent from maven-central
      uses: ./.github/workflows/maven-goal
      with:
        command: ./mvnw dependency:purge-local-repository package -pl apm-agent-lambda-layer
    - continue-on-error: true
      uses: hashicorp/vault-action@v3.0.0
      with:
        method: approle
        roleId: ${{ secrets.VAULT_ROLE_ID }}
        secretId: ${{ secrets.VAULT_SECRET_ID }}
        secrets: 'secret/observability-team/ci/service-account/apm-aws-lambda access_key_id
          | AWS_ACCESS_KEY_ID ;

          secret/observability-team/ci/service-account/apm-aws-lambda secret_access_key
          | AWS_SECRET_ACCESS_KEY

          '
        url: ${{ secrets.VAULT_ADDR }}
    - continue-on-error: true
      if: ${{ ! inputs.dry_run }}
      name: Publish
      run: '# Convert v1.2.3 to ver-1-2-3

        VERSION=${TAG_NAME/v/ver-}

        VERSION=${VERSION//./-}


        ELASTIC_LAYER_NAME="elastic-apm-java-${VERSION}" .ci/publish-aws.sh

        '
    - continue-on-error: true
      if: ${{ ! inputs.dry_run }}
      uses: actions/upload-artifact@v4
      with:
        name: arn-file
        path: .ci/.arn-file.md
    - continue-on-error: true
      id: arn_output
      if: ${{ ! inputs.dry_run }}
      name: Add ARN file to output
      run: 'echo ''arn_content<<ARN_CONTENT_EOF'' >> $GITHUB_OUTPUT

        cat .ci/.arn-file.md >> $GITHUB_OUTPUT

        echo ''ARN_CONTENT_EOF'' >> $GITHUB_OUTPUT

        '
  update_cloudfoundry:
    name: Update Cloudfoundry
    needs:
    - await_artifact_on_maven_central
    permissions:
      contents: write
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      uses: elastic/apm-pipeline-library/.github/actions/github-token@current
      with:
        roleId: ${{ secrets.VAULT_ROLE_ID }}
        secretId: ${{ secrets.VAULT_SECRET_ID }}
        url: ${{ secrets.VAULT_ADDR }}
    - continue-on-error: true
      uses: elastic/apm-pipeline-library/.github/actions/setup-git@current
      with:
        email: ${{ env.GIT_EMAIL }}
        token: ${{ env.GITHUB_TOKEN }}
        username: ${{ env.GIT_USER }}
    - continue-on-error: true
      uses: actions/checkout@v4
      with:
        ref: ${{ inputs.branch }}
        token: ${{ env.GITHUB_TOKEN }}
    - continue-on-error: true
      name: Update Cloudfoundry index.yml file
      run: .ci/release/update_cloudfoundry.sh ${{ inputs.version }}
      shell: bash
    - continue-on-error: true
      if: ${{ ! inputs.dry_run }}
      name: Push changes
      run: git push origin ${{ inputs.branch }}
  update_major_branch:
    name: Update Major Branch
    needs:
    - await_artifact_on_maven_central
    permissions:
      contents: write
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      uses: elastic/apm-pipeline-library/.github/actions/github-token@current
      with:
        roleId: ${{ secrets.VAULT_ROLE_ID }}
        secretId: ${{ secrets.VAULT_SECRET_ID }}
        url: ${{ secrets.VAULT_ADDR }}
    - continue-on-error: true
      uses: elastic/apm-pipeline-library/.github/actions/setup-git@current
      with:
        email: ${{ env.GIT_EMAIL }}
        token: ${{ env.GITHUB_TOKEN }}
        username: ${{ env.GIT_USER }}
    - continue-on-error: true
      uses: actions/checkout@v4
      with:
        ref: ${{ env.TAG_NAME }}
        token: ${{ env.GITHUB_TOKEN }}
    - continue-on-error: true
      name: Update major branch
      run: .ci/release/update_major_branch.sh ${{ inputs.version }}
    - continue-on-error: true
      if: ${{ ! inputs.dry_run }}
      name: Push changes
      run: git push -f origin "$(echo '${{ inputs.version }}' | sed -E 's/\..+/.x/')"
name: release
on:
  repository_dispatch:
    types: trigger-ga___release.yml
permissions:
  contents: read
